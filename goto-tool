#!/usr/bin/env python

import sys
import os
import re
import time

try:
	from xdg.BaseDirectory import xdg_config_home
except ImportError:
	xdg_config_home = os.path.expanduser('~/.config')

"""
Current fields are:

	key, path, access date, access count

Therefore the elements are:

	path, access date, access count
"""

FIELD_SEPARATOR = ':'
ELEMENTS_PER_ROW = 3	# Attributes per row (everything but the name)

(F_PATH, F_ACCESS_TIME, F_ACCESS_COUNT) = range(ELEMENTS_PER_ROW)


def escape_split(what, sep, splits):
	return re.split(r"(?<!\\)" + sep, what, splits)


def goto_file_path():
	try:
		return os.path.abspath(os.environ['GOTO_FILE'])
	except KeyError:
		return os.path.join(xdg_config_home, 'goto_favourites.list')


def fill_list(l, count):
	if len(l) >= count:
		return l

	diff = count - len(l)

	return l + ([''] * diff)


def read_goto_file():
	"""
	Return stored directories as dictionary. The key is the name of the
	entry, the value is a list of properties ordered like this:
	path, access date, access count.

	Example:
	{'ex1':['/home/me/ex1','11223344','10']}
	"""
	path = goto_file_path()

	try:
		os.stat(path)
	except OSError:
		return {}

	def smap(x):
		y = list(map(lambda e: e.strip(), x))

		return y[0], fill_list(y[1:], ELEMENTS_PER_ROW)

	try:
		tuples = (smap(escape_split(n,FIELD_SEPARATOR,ELEMENTS_PER_ROW)) for n in (open(path, 'r').readlines()))
	except IOError as e:
		fatal("Something went wrong while opening the file '%s': %s" % (
				e, path))

	return dict(tuples)


def write_goto_file(dirs):
	path = goto_file_path()

	if not os.path.exists(os.path.dirname(path)):
		os.makedirs(os.path.dirname(path))

	data = "\n".join(["%s: %s" % (key, FIELD_SEPARATOR.join(props)) for (key,props) in dirs.items()])

	try:
		open(path, 'w').write(data)
	except IOError as e:
		fatal("Something went wrong while writing: %s" % (e))


def print_directory_by_name(dirname):
	dirs = read_goto_file()
	try:
		print(dirs[dirname][F_PATH])
	except KeyError:
		fatal("Entry '%s' not found." % (dirname,))


def mark_entry_as_used(dirname):
	dirs = read_goto_file()

	if not (dirname in dirs):
		fatal("Entry '%s' not found." % (dirname,))

	dirs[dirname][F_ACCESS_TIME] = str(time.time())

	count = dirs[dirname][F_ACCESS_COUNT]
	count = count and int(count) or 0
	count += 1

	dirs[dirname][F_ACCESS_COUNT] = str(count)

	write_goto_file(dirs)

	print("Entry '%s' marked as used." % (dirname,))


def resolve_softlink(path):
	""" make an attempt to get the symlink from the current dir
	if wanted. If that attempt fails, just return the path. """
	if os.path.islink(path):
		return os.path.abspath(path)
	if path == '.':
		return os.environ['PWD']
	return path


def add_directory(name, path, soft=False):
	""" Don't take abspath if soft=True """
	dirs = read_goto_file()

	try:
		os.stat(path)
	except OSError:
		fatal('Path is not accessible: %s' % (path,))

	dirs[name] = [soft and resolve_softlink(path) or os.path.abspath(path)]

	write_goto_file(dirs)
	print("Entry '%s' added, points to '%s'." % (name, dirs[name][F_PATH]))


def rm_directory(name):
	dirs = read_goto_file()

	try:
		del dirs[name]
	except KeyError:
		fatal("Entry '%s' does not exist." % (name,))

	write_goto_file(dirs)
	print("Entry '%s' removed." % (name,))


def mv_directory(oldName, newName):
	dirs = read_goto_file()

	try:
		dirs[newName] = dirs[oldName]
		del dirs[oldName]
	except KeyError:
		fatal("Entry '%s' does not exist." % (oldName,))

	write_goto_file(dirs)
	print("Entry '%s' was rennamed to '%s'." % (oldName, newName))


def list_directories():
	dirs = read_goto_file()
	print("\n".join(["%s: %s" % (key,path) for (key,(path,date,count)) in dirs.items()]))


def fatal(msg):
	#print((>> sys.stderr), msg)
	sys.exit(1)


def usage():
	fatal("Usage: %s [get <name> | list | add [--soft] <name> <path> | rm <name> | path]" % (
		sys.argv[0],))


def main():
	argv = sys.argv

	if len(argv) in (4,5) and argv[1] == "add":
		if argv[2] == "--soft" and len(argv) == 5:
			add_directory(argv[3], argv[4], soft=True)
		elif argv[2] == "--soft":
			usage()
		else:
			add_directory(argv[2], argv[3])

	elif len(argv) == 3 and argv[1] == "rm":
		rm_directory(argv[2])

	elif len(argv) == 4 and argv[1] == "mv":
		mv_directory(argv[2],argv[3])

	elif len(argv) == 3 and argv[1] == "get":
		print_directory_by_name(argv[2])

	elif len(argv) == 3 and argv[1] == "use":
		mark_entry_as_used(argv[2])

	elif len(argv) == 2 and argv[1] == "list":
		list_directories()

	elif len(argv) == 2 and argv[1] == "path":
		print(goto_file_path())

	else:
		usage()


if __name__ == "__main__":
	main()
